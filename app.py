import gradio as gr
import tensorflow as tf
import numpy as np
import cv2
from PIL import Image

# =============================================================================
# C·∫§U H√åNH V√Ä T·∫¢I MODEL
# =============================================================================
MODEL_PATH = "anemia_model.keras"
IMG_SIZE = (224, 224)
OPTIMIZED_THRESHOLD = 0.1641
CLASS_NAMES = ['anemia', 'non-anemia']
ANEMIA_INDEX = CLASS_NAMES.index('anemia')

print("ƒêang t·∫£i model...")
try:
    model = tf.keras.models.load_model(MODEL_PATH)
    print("‚úÖ Model ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")
except Exception as e:
    print(f"L·ªñI: Kh√¥ng th·ªÉ t·∫£i model. H√£y ch·∫Øc ch·∫Øn file '{MODEL_PATH}' t·ªìn t·∫°i.")
    print(e)
    model = None

# =============================================================================
# C√ÅC H√ÄM X·ª¨ L√ù (Kh√¥ng c·∫ßn thay ƒë·ªïi)
# =============================================================================

def preprocess_image(img_pil):
    """Ti·ªÅn x·ª≠ l√Ω ·∫£nh PIL ƒë·∫ßu v√†o ƒë·ªÉ ph√π h·ª£p v·ªõi model."""
    img_np = np.array(img_pil).astype('uint8')
    if len(img_np.shape) == 2 or img_np.shape[2] == 1:
        img_np = cv2.cvtColor(img_np, cv2.COLOR_GRAY2RGB)
    if img_np.shape[2] == 4:
        img_np = cv2.cvtColor(img_np, cv2.COLOR_RGBA2RGB)
    img_resized = cv2.resize(img_np, IMG_SIZE)
    img_expanded = np.expand_dims(img_resized, axis=0)
    return tf.keras.applications.mobilenet_v3.preprocess_input(img_expanded)

def predict(input_image):
    """H√†m ch√≠nh: nh·∫≠n ·∫£nh, d·ª± ƒëo√°n, tr·∫£ v·ªÅ l·ªùi khuy√™n v√† ƒë·ªô tin c·∫≠y."""
    try:
        if model is None:
            raise ValueError("Model ch∆∞a ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")

        processed_input = preprocess_image(input_image)
        raw_prob = model.predict(processed_input)[0][0]

        # V√¨ model output = P(non-anemia), n√™n:
        anemia_score = 1 - raw_prob  

        print("-" * 30)
        print(f"[DEBUG] raw_prob (P[non-anemia]): {raw_prob:.4f}")
        print(f"[DEBUG] anemia_score (P[anemia]): {anemia_score:.4f}")
        print(f"[DEBUG] Ng∆∞·ª°ng ƒëang s·ª≠ d·ª•ng: {OPTIMIZED_THRESHOLD}")

        if anemia_score > OPTIMIZED_THRESHOLD:
            result_status = "Nghi ng·ªù Thi·∫øu m√°u"
            advice_text = """
            <p style='font-size: 1.2em; color: #D32F2F; text-align: center;'>
            <b>K·∫øt qu·∫£: C√≥ d·∫•u hi·ªáu Thi·∫øu m√°u</b>
            </p>
            <p><b>L·ªùi khuy√™n:</b> K·∫øt qu·∫£ ph√¢n t√≠ch cho th·∫•y c√°c d·∫•u hi·ªáu c·ªßa thi·∫øu m√°u. 
            Ch√∫ng t√¥i khuy√™n b·∫°n n√™n <b>tham kh·∫£o √Ω ki·∫øn b√°c sƒ© s·ªõm</b> ƒë·ªÉ ƒë∆∞·ª£c ch·∫©n ƒëo√°n v√† t∆∞ v·∫•n ch√≠nh x√°c.</p>
            """
        else:
            result_status = "Kh√¥ng nghi ng·ªù Thi·∫øu m√°u"
            advice_text = """
            <p style='font-size: 1.2em; color: #388E3C; text-align: center;'>
            <b>K·∫øt qu·∫£: Kh√¥ng c√≥ d·∫•u hi·ªáu Thi·∫øu m√°u</b>
            </p>
            <p><b>L·ªùi khuy√™n:</b> D·ª±a tr√™n h√¨nh ·∫£nh, m√¥ h√¨nh kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu thi·∫øu m√°u. 
            Tuy nhi√™n, h√£y lu√¥n duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh v√† <b>kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥</b>.</p>
            """

        print(f"[DEBUG] K·∫øt qu·∫£: {result_status} (V√¨ {anemia_score:.4f} so v·ªõi ng∆∞·ª°ng {OPTIMIZED_THRESHOLD})")
        print("-" * 30)

        confidence_output = {
            "Thi·∫øu m√°u": float(anemia_score),
            "Kh√¥ng Thi·∫øu m√°u": float(raw_prob)
        }
        return advice_text, confidence_output

    except Exception as e:
        print("!!!!!!!!!!!!!! L·ªñI TRONG QU√Å TR√åNH D·ª∞ ƒêO√ÅN !!!!!!!!!!!!!!")
        print(e)
        error_message = f"ƒê√£ c√≥ l·ªói x·∫£y ra: {e}"
        return f"<p style='color: red;'><b>L·ªói:</b> {error_message}</p>", {"L·ªói": 1.0}


# =============================================================================
# GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (GRADIO UI - Kh√¥ng c·∫ßn thay ƒë·ªïi)
# =============================================================================
with gr.Blocks(
    theme=gr.themes.Soft(font=[gr.themes.GoogleFont("Inter"), "Arial", "sans-serif"]),
    css="body, .gradio-container { font-size: 16px !important; } footer {display: none !important}"
) as app:
    
    gr.Markdown(
        """
        <div style="text-align: center;"> 
            <h1>·ª®ng d·ª•ng S√†ng l·ªçc Thi·∫øu m√°u qua ·∫¢nh k·∫øt m·∫°c</h1>
            <p>M·ªôt d·ª± √°n nghi√™n c·ª©u khoa h·ªçc s·ª≠ d·ª•ng Tr√≠ tu·ªá nh√¢n t·∫°o</p>
        </div>
        """
    )
    
    with gr.Row():
        with gr.Column(scale=1):
            input_image = gr.Image(type="pil", label="T·∫£i ·∫£nh l√™n ho·∫∑c ch·ªçn ·∫£nh m·∫´u")
            
            with gr.Accordion("üí° H∆∞·ªõng d·∫´n ch·ª•p ·∫£nh ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t", open=False):
                gr.Markdown("""
                1.  **√Ånh s√°ng:** Ch·ª•p ·ªü n∆°i c√≥ ƒë·ªß s√°ng, tr√°nh b√≥ng t·ªëi v√† ƒë√®n flash tr·ª±c ti·∫øp.
                2.  **ƒê·ªô n√©t:** Gi·ªØ ƒëi·ªán tho·∫°i ch·∫Øc tay ƒë·ªÉ ·∫£nh kh√¥ng b·ªã m·ªù, nh√≤e.
                3.  **G√≥c ch·ª•p:** K√©o nh·∫π m√≠ m·∫Øt d∆∞·ªõi xu·ªëng v√† nh√¨n th·∫≥ng v√†o camera.
                4.  **Ch·∫•t l∆∞·ª£ng:** ƒê·∫£m b·∫£o ·∫£nh r√µ n√©t, cho th·∫•y r√µ c√°c m·∫°ch m√°u b√™n trong m√≠ m·∫Øt.
                """)

            gr.Examples(
                examples=["dataset/test/anemia/15.jpg", "dataset/test/non-anemia/16.jpg", "dataset/test/non-anemia/44.jpg"],
                inputs=input_image,
                label="·∫¢nh m·∫´u"
            )
            submit_button = gr.Button("B·∫Øt ƒë·∫ßu Ph√¢n t√≠ch", variant="primary", scale=2)
            
        with gr.Column(scale=1):
            gr.Markdown("### **K·∫øt qu·∫£ Ph√¢n t√≠ch**")
            
            with gr.Accordion("1. L·ªùi khuy√™n & K·∫øt qu·∫£", open=True):
                advice_output = gr.Markdown()
            
            with gr.Accordion("2. Ph√¢n t√≠ch ƒê·ªô tin c·∫≠y c·ªßa Model", open=True):
                confidence_chart = gr.Label(label="ƒêi·ªÉm tin c·∫≠y", num_top_classes=2)

    gr.Markdown(
        """
        ---
        <p style='text-align: center; font-size: 0.9em;'>
        <b>Tuy√™n b·ªë mi·ªÖn tr·ª´ tr√°ch nhi·ªám:</b> ƒê√¢y l√† m·ªôt c√¥ng c·ª• nghi√™n c·ª©u v√† kh√¥ng th·ªÉ thay th·∫ø cho ch·∫©n ƒëo√°n y t·∫ø chuy√™n nghi·ªáp.
        Vui l√≤ng tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t.
        </p>
        """
    )

    submit_button.click(
        fn=predict,
        inputs=input_image,
        outputs=[advice_output, confidence_chart],
        api_name="predict"
    )

if __name__ == "__main__":
    app.launch(share=True)
    